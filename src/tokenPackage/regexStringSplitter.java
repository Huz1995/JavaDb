package tokenPackage;

public enum regexStringSplitter {
    PRIMARY(    
    " (?=\\s([^']*'[^']*')*[^']*$)|" +
    "(?=[(](?=([^']*'[^']*')*[^']*$))|" + 
    "(?<=[(](?=([^']*'[^']*')*[^']*$))|" +
    "(?=[)](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[)](?=([^']*'[^']*')*[^']*$))|" +
    "(?=,(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=,(?=([^']*'[^']*')*[^']*$))|" +
    "(?=[*](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[*](?=([^']*'[^']*')*[^']*$))"
    ),
    SECONDARY(
    "(?=[}](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[}](?=([^']*'[^']*')*[^']*$))|" +
    "(?=[{](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[{](?=([^']*'[^']*')*[^']*$))|" +
    "(?=(>)(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=(>)(?=([^']*'[^']*')*[^']*$))|" +
    "(?=(<)(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=(<)(?=([^']*'[^']*')*[^']*$))|" +
    "(?=(=)(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=(=)(?=([^']*'[^']*')*[^']*$))|" +
    "(?=(!)(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=(!)(?=([^']*'[^']*')*[^']*$))|" +
    "(?=(@)(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=(@)(?=([^']*'[^']*')*[^']*$))|" +
    " (?=([^']*'[^']*')*[^']*$)|" +
    "(?=[(](?=([^']*'[^']*')*[^']*$))|" + 
    "(?<=[(](?=([^']*'[^']*')*[^']*$))|" +
    "(?=[)](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[)](?=([^']*'[^']*')*[^']*$))|" +
    "(?=,(?=([^']*'[^']*')*[^']*$))|" +
    "(?<=,(?=([^']*'[^']*')*[^']*$))|" +
    "(?=[*](?=([^']*'[^']*')*[^']*$))|" +
    "(?<=[*](?=([^']*'[^']*')*[^']*$))"
    );

    public String regexExpression;

    private regexStringSplitter(String regexExpresion) {
        this.regexExpression = regexExpresion;
    }

    public String get() {
       return regexExpression;
    }
}
